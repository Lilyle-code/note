{"ID":"20250529100820-5i2yhlh","Spec":"1","Type":"NodeDocument","Properties":{"id":"20250529100820-5i2yhlh","title":"SQL语句","type":"doc","updated":"20250604112807"},"Children":[{"ID":"20250603103211-kk1t4v3","Type":"NodeParagraph","Properties":{"id":"20250603103211-kk1t4v3","updated":"20250603103247"},"Children":[{"Type":"NodeText","Data":"SQL（结构化查询语言，Structured Query Language）是设计让用户查询、操作和转换关系数据库中数据的语言。"}]},{"ID":"20250529100820-tp016ra","Type":"NodeParagraph","Properties":{"id":"20250529100820-tp016ra","updated":"20250603102230"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"关系数据库（Relational databases）"},{"Type":"NodeText","Data":"表示相关（二维）表的集合。每个表都类似于 Excel 表格，具有固定数量的命名列（表的属性或属性）和任意数量的数据行。"}]},{"ID":"20250603102205-4olig12","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250603102205-4olig12","updated":"20250604112807"},"Children":[{"Type":"NodeText","Data":"带约束的查询"}]},{"ID":"20250603103442-boh7chs","Type":"NodeList","ListData":{},"Properties":{"id":"20250603103442-boh7chs","updated":"20250603105135"},"Children":[{"ID":"20250603103723-zzksk9s","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250603103723-zzksk9s","updated":"20250603103723"},"Children":[{"ID":"20250603103723-czhehl3","Type":"NodeParagraph","Properties":{"id":"20250603103723-czhehl3","updated":"20250603103747"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"WHERE"},{"Type":"NodeText","Data":" 子句：过滤掉某些结果不返回。该子句通过检查特定列的值来应用于每一行数据，以确定它是否应该包含在结果中。"}]}]},{"ID":"20250603105131-phtg6ts","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250603105131-phtg6ts","updated":"20250603105135"},"Children":[{"ID":"20250603105131-xj2f708","Type":"NodeParagraph","Properties":{"id":"20250603105131-xj2f708","updated":"20250603105135"},"Children":[{"Type":"NodeText","Data":"可用于数值数据（例如整数或浮点数）的有用运算符："}]}]}]},{"ID":"20250603103815-80j7569","Type":"NodeTable","TableAligns":[0,0,0],"Properties":{"colgroup":"width: 157px;|width: 353px;|width: 217px;","id":"20250603103815-80j7569","updated":"20250603103815"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"Operator  运算符"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"Condition  条件"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"SQL Example  SQL 示例"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"="}]},{"Type":"NodeText","Data":", !"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"="}]},{"Type":"NodeText","Data":", "},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"\u003c"}]},{"Type":"NodeText","Data":", "},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"\u003c"}]},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"="}]},{"Type":"NodeText","Data":", "},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"\u003e"}]},{"Type":"NodeText","Data":", "},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"\u003e"}]},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"="}]}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Standard numerical operators 标准数值运算符"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"col"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]},{"Type":"NodeText","Data":"name !"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"="}]},{"Type":"NodeText","Data":" 4"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"BETWEEN … AND …"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Number is within range of two values (inclusive) 数值在两个值之间（包含两端）"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"col"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]},{"Type":"NodeText","Data":"name BETWEEN 1.5 AND 10.5"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"NOT BETWEEN … AND …"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Number is not within range of two values (inclusive) 数值不在两个值之间（包含两端）"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"col"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]},{"Type":"NodeText","Data":"name NOT BETWEEN 1 AND 10"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"IN (…)"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Number exists in a list"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"col"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]},{"Type":"NodeText","Data":"name IN (2, 4, 6)"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"NOT IN (…)"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Number does not exist in a list 数字不在列表中"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"col"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]},{"Type":"NodeText","Data":"name NOT IN (1, 3, 5)"}]}]}]},{"ID":"20250603103816-ugb1dv5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250603103816-ugb1dv5","updated":"20250603104900"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# Find the movie with a row id of 6\nSELECT * FROM movies \nWHERE id = 6;\n\n# Find the movies released in the years between 2000 and 2010\nSELECT * FROM movies \nWHERE year BETWEEN 2000 AND 2010;\n\n# Find the movies not released in the years between 2000 and 2010\nSELECT * FROM movies \nWHERE year NOT BETWEEN 2000 AND 2010;\n\n# Find the first 5 Pixar movies and their release year\nSELECT title, year FROM movies\nWHERE year \u003c= 2003;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250603105221-2k4u41h","Type":"NodeList","ListData":{},"Properties":{"id":"20250603105221-2k4u41h","updated":"20250603105249"},"Children":[{"ID":"20250603105229-vs63ekc","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250603105229-vs63ekc","updated":"20250603105249"},"Children":[{"ID":"20250603105229-9hkttra","Type":"NodeParagraph","Properties":{"id":"20250603105229-9hkttra","updated":"20250603105249"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"可用于文本数据的运算符："}]}]}]},{"ID":"20250603105020-4vo6y9a","Type":"NodeTable","TableAligns":[0,0,0],"Properties":{"colgroup":"width: 89px;|width: 403px;|width: 319px;","id":"20250603105020-4vo6y9a","updated":"20250603105030"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"Operator  运算符"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"Condition  条件"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"Example  示例"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"="}]}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Case sensitive exact string comparison ("},{"Type":"NodeTextMark","TextMarkType":"em","TextMarkTextContent":"notice the single equals"},{"Type":"NodeText","Data":") 区分大小写的精确字符串比较（注意等号的使用）"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"col"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]},{"Type":"NodeText","Data":"name "},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"="}]},{"Type":"NodeText","Data":" \"abc\""}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"!= 或 \u003c\u003e"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Case sensitive exact string inequality comparison 区分大小写的精确字符串不等比较"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"col"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]},{"Type":"NodeText","Data":"name !"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"="}]},{"Type":"NodeText","Data":" \"abcd\""}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"LIKE"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Case insensitive exact string comparison 不区分大小写的精确字符串比较"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"col"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]},{"Type":"NodeText","Data":"name LIKE \"ABC\""}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"NOT LIKE"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Case insensitive exact string inequality comparison 不区分大小写的精确字符串不等比较"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"col"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]},{"Type":"NodeText","Data":"name NOT LIKE \"ABCD\""}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"%"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Used anywhere in a string to match a sequence of zero or more characters (only with LIKE or NOT LIKE) 用于字符串的任何位置，以匹配零个或多个字符的序列（仅与 LIKE 或 NOT LIKE 一起使用）"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"col"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]},{"Type":"NodeText","Data":"name LIKE \"%AT%\""},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"(matches \"AT\", \"ATTIC\", \"CAT\" or even \"BATS\") （匹配\"AT\"、\"ATTIC\"、\"CAT\"甚至\"BATS\"）"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Used anywhere in a string to match a single character (only with LIKE or NOT LIKE) 在任何字符串中用于匹配单个字符（仅与 LIKE 或 NOT LIKE 一起使用）"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"col"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]},{"Type":"NodeText","Data":"name LIKE \"AN"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]},{"Type":"NodeText","Data":"\""},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"(matches \"AND\", but not \"AN\") （匹配\"AND\"，但不匹配\"AN\"）"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"IN (…)"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"String exists in a list 字符串存在于列表中"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"col"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]},{"Type":"NodeText","Data":"name IN (\"A\", \"B\", \"C\")"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"NOT IN (…)"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"String does not exist in a list 字符串不存在于列表中"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"col"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]},{"Type":"NodeText","Data":"name NOT IN (\"D\", \"E\", \"F\")"}]}]}]},{"ID":"20250603105200-907jl0s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250603105200-907jl0s","updated":"20250603110157"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# Find all the Toy Story movies\nSELECT * FROM movies\nWHERE title LIKE \"%Toy Story%\";\n\n# Find all the movies directed by John Lasseter\nSELECT * FROM movies\nWHERE director = \"John Lasseter\";\n\n# Find all the movies (and director) not directed by John Lasseter\nSELECT * FROM movies\nWHERE director != \"John Lasseter\";\n\n# Find all the WALL-* movies\nSELECT * FROM movies\nWHERE title LIKE \"WALL-_\" ;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250603110215-m02mgmf","Type":"NodeList","ListData":{},"Properties":{"id":"20250603110215-m02mgmf","updated":"20250603111412"},"Children":[{"ID":"20250603110218-07iofx2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250603110218-07iofx2","updated":"20250603111410"},"Children":[{"ID":"20250603110218-u7x0apy","Type":"NodeParagraph","Properties":{"id":"20250603110218-u7x0apy","updated":"20250603110226"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"过滤和排序查询结果"}]},{"ID":"20250603110419-tv2k8vd","Type":"NodeList","ListData":{},"Properties":{"id":"20250603110419-tv2k8vd","updated":"20250603110419"},"Children":[{"ID":"20250603110223-37xkk98","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250603110223-37xkk98","updated":"20250603110223"},"Children":[{"ID":"20250603110223-fjtehua","Type":"NodeParagraph","Properties":{"id":"20250603110223-fjtehua","updated":"20250603110524"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"DISTINCT 关键字"},{"Type":"NodeText","Data":"：丢弃具有重复列值的行。"}]}]}]},{"ID":"20250603110501-u57bd8j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250603110501-u57bd8j","updated":"20250603110552"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"SELECT DISTINCT column, another_column, …\nFROM mytable\nWHERE condition(s);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250603110645-rilxoqh","Type":"NodeList","ListData":{},"Properties":{"id":"20250603110645-rilxoqh","updated":"20250603110645"},"Children":[{"ID":"20250603110625-8u6y4i3","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250603110625-8u6y4i3","updated":"20250603110625"},"Children":[{"ID":"20250603110625-jhsw1uh","Type":"NodeParagraph","Properties":{"id":"20250603110625-jhsw1uh","updated":"20250603111351"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"ORDER BY 子句"},{"Type":"NodeText","Data":"：按指定列升序或降序排序结果的方法"}]}]}]},{"ID":"20250603111428-t55rron","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250603111428-t55rron","updated":"20250603111433"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"SELECT column, another_column, …\nFROM mytable\nWHERE condition(s)\nORDER BY column ASC/DESC;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250603111519-6rzo5ky","Type":"NodeList","ListData":{},"Properties":{"id":"20250603111519-6rzo5ky","updated":"20250603111519"},"Children":[{"ID":"20250603111506-josp40n","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250603111506-josp40n","updated":"20250603111506"},"Children":[{"ID":"20250603111506-lgw7hx5","Type":"NodeParagraph","Properties":{"id":"20250603111506-lgw7hx5","updated":"20250603111817"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"LIMIT 和 OFFSET 子句"},{"Type":"NodeText","Data":"：LIMIT 将减少返回的行数，而 OFFSET 将指定从哪里开始计算行数。"},{"Type":"NodeTextMark","Properties":{"style":"background-color: var(--b3-font-background1);"},"TextMarkType":"text","TextMarkTextContent":"它们通常是在其他子句应用后最后执行的"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"background-color: var(--b3-font-background1);\"}"},{"Type":"NodeText","Data":"。"}]}]}]},{"ID":"20250603111734-8hvkbl7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250603111734-8hvkbl7","updated":"20250603111738"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"SELECT column, another_column, …\nFROM mytable\nWHERE condition(s)\nORDER BY column ASC/DESC\nLIMIT num_limit OFFSET num_offset;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20250603111829-u18a902","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250603111829-u18a902","updated":"20250603113524"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# List all directors of Pixar movies (alphabetically), without duplicates\nSELECT DISTINCT director FROM movies\nORDER BY director ASC;\n\n# List the last four Pixar movies released (ordered from most recent to least)\nSELECT * FROM movies\nORDER BY Year DESC LIMIT 4 OFFSET 1;\n\n# List the first five Pixar movies sorted alphabetically\nSELECT title FROM movies\nORDER BY title ASC\nLIMIT 5;\n\n# List the next five Pixar movies sorted alphabetically\nSELECT title FROM movies\nORDER BY title ASC\nLIMIT 5 OFFSET 6;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250603111422-h08n9og","Type":"NodeList","ListData":{},"Properties":{"id":"20250603111422-h08n9og","updated":"20250603181537"},"Children":[{"ID":"20250603113612-2402nq1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250603113612-2402nq1","updated":"20250603181537"},"Children":[{"ID":"20250603113612-zola74j","Type":"NodeParagraph","Properties":{"id":"20250603113612-zola74j","updated":"20250603181537"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"SELECT"},{"Type":"NodeText","Data":" 查询练习"}]}]}]},{"ID":"20250603113624-zxgnipq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250603113624-zxgnipq","updated":"20250603170431"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# List all the Canadian cities and their populations\nSELECT City,Population FROM north_american_cities \nWHERE Country = \"Canada\"; \n\n# Order all the cities in the United States by their latitude from north to south\nSELECT * FROM north_american_cities \nWHERE Country = \"United States\" ORDER BY Latitude DESC; \t\n\n# List all the cities west of Chicago, ordered from west to east\nSELECT * FROM north_american_cities \nWHERE longitude \u003c -87.629798 ORDER BY longitude;\n\n# List the two largest cities in Mexico (by population)\nSELECT * FROM north_american_cities \nWHERE country = \"Mexico\" ORDER BY population DESC LIMIT 2;\n\n# List the third and fourth largest cities (by population) in the United States and their population\nSELECT city, population FROM north_american_cities \nWHERE country = \"United States\" ORDER BY population DESC LIMIT 2 OFFSET 2;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250603170433-az69g9c","Type":"NodeList","ListData":{},"Properties":{"id":"20250603170433-az69g9c","updated":"20250603181458"},"Children":[{"ID":"20250603181458-s7ydvz8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250603181458-s7ydvz8","updated":"20250603181458"},"Children":[{"ID":"20250603181458-z308x9s","Type":"NodeParagraph","Properties":{"id":"20250603181458-z308x9s","updated":"20250603181810"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"JOIN"},{"Type":"NodeText","Data":" 子句：共享关于单个实体信息的表需要有一个主键，该主键可以在整个数据库中唯一标识该实体。"}]},{"ID":"20250603181524-5uvci0k","Type":"NodeList","ListData":{},"Properties":{"id":"20250603181524-5uvci0k","updated":"20250603181524"},"Children":[{"ID":"20250603181506-51jclll","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250603181506-51jclll","updated":"20250603181506"},"Children":[{"ID":"20250603181506-mcnhdqv","Type":"NodeParagraph","Properties":{"id":"20250603181506-mcnhdqv","updated":"20250603181826"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"INNER JOIN"},{"Type":"NodeText","Data":"：使用唯一键将两个单独表中的行数据结合起来。"}]}]}]},{"ID":"20250603182034-adsgs29","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250603182034-adsgs29","updated":"20250603195933"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# 示例\nSELECT column, another_table_column, …\nFROM mytable\nINNER JOIN another_table \n    ON mytable.id = another_table.id\nWHERE condition(s)\nORDER BY column, … ASC/DESC\nLIMIT num_limit OFFSET num_offset;\n\n# 练习内容\n# Find the domestic and international sales for each movie\nSELECT title, domestic_sales,international_sales FROM Boxoffice\nINNER JOIN movies WHERE Boxoffice.Movie_id = movies .id;\n\n# Show the sales numbers for each movie that did better internationally rather than domestically\nSELECT title,domestic_sales, international_sales FROM Boxoffice \nINNER JOIN Movies ON Boxoffice.Movie_id  = Movies.id WHERE domestic_sales \u003c international_sales;\n\n# List all the movies by their ratings in descending order\nSELECT title FROM movies \nINNER JOIN boxoffice ON Boxoffice.Movie_id  = Movies.id ORDER BY rating DESC;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250603182037-oj53dkz","Type":"NodeList","ListData":{},"Properties":{"id":"20250603182037-oj53dkz","updated":"20250603182037"},"Children":[{"ID":"20250603200004-dkbor4e","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250603200004-dkbor4e","updated":"20250603200004"},"Children":[{"ID":"20250603200004-86z6ujy","Type":"NodeParagraph","Properties":{"id":"20250603200004-86z6ujy","updated":"20250603200303"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"OUTER JOINs"},{"Type":"NodeText","Data":"：如果两个表具有非对称数据，需要使用 LEFT JOIN 、 RIGHT JOIN 或 FULL JOIN 确保需要的数据不会从结果中遗漏。当将表 A 连接到表 B 时， LEFT JOIN 简单地将 A 中的行包括进来，无论是否在 B 中找到匹配的行。 RIGHT JOIN 相同，但相反，无论是否在 A 中找到匹配的行，都会保留 B 中的行。最后， FULL JOIN 简单意味着保留两个表中的行，无论是否在另一个表中存在匹配的行。"}]}]}]},{"ID":"20250603200106-b7g70xo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250603200106-b7g70xo","updated":"20250603202519"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# 示例\nSELECT column, another_column, …\nFROM mytable\nINNER/LEFT/RIGHT/FULL JOIN another_table \n    ON mytable.id = another_table.matching_id\nWHERE condition(s)\nORDER BY column, … ASC/DESC\nLIMIT num_limit OFFSET num_offset;\n\n# 练习\n# Find the list of all buildings that have employees\nSELECT DISTINCT building FROM employees;\n\n# Find the list of all buildings and their capacity\nSELECT * FROM buildings;\n\n# List all buildings and the distinct employee roles in each building (including empty buildings)\nSELECT DISTINCT building_name, role FROM buildings\nLEFT JOIN employees ON buildings.building_name = employees.building;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20250603202751-fyymo1r","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250603202751-fyymo1r","updated":"20250603202751"},"Children":[{"ID":"20250603202751-t7yaco0","Type":"NodeParagraph","Properties":{"id":"20250603202751-t7yaco0","updated":"20250603202811"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"关于 NULL"}]}]}]},{"ID":"20250603202812-fes0rgi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250603202812-fes0rgi","updated":"20250603203203"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# 示例\nSELECT column, another_column, …\nFROM mytable\nWHERE column IS/IS NOT NULL\nAND/OR another_condition\nAND/OR …;\n\n# 练习\n# Find the name and role of all employees who have not been assigned to a building\nSELECT role,name FROM employees\nWHERE building IS NULL;\n\n# Find the names of the buildings that hold no employees\nSELECT building_name FROM buildings LEFT JOIN employees ON buildings.building_name = employees.building\nWHERE building IS NULL;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250603202835-nn18v6b","Type":"NodeList","ListData":{},"Properties":{"id":"20250603202835-nn18v6b","updated":"20250603205840"},"Children":[{"ID":"20250603203221-wgsflju","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250603203221-wgsflju","updated":"20250603205840"},"Children":[{"ID":"20250603203221-i09995w","Type":"NodeParagraph","Properties":{"id":"20250603203221-i09995w","updated":"20250603203226"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"表达式查询"}]},{"ID":"20250603203527-38a3wmq","Type":"NodeList","ListData":{},"Properties":{"id":"20250603203527-38a3wmq","updated":"20250603203527"},"Children":[{"ID":"20250603203527-y05clvk","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250603203527-y05clvk","updated":"20250603203527"},"Children":[{"ID":"20250603203529-27ykgh2","Type":"NodeParagraph","Properties":{"id":"20250603203529-27ykgh2","updated":"20250603203548"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"AS 关键字"},{"Type":"NodeText","Data":"：提供描述性别名"}]}]}]},{"ID":"20250603203559-levxsyu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250603203559-levxsyu","updated":"20250603205840"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"#示例\nSELECT col_expression AS expr_description, …\nFROM mytable;\n\n# 练习\n# List all movies and their combined sales in millions of dollars ✓\nSELECT title, (domestic_sales + international_sales)/1000000 AS sales FROM movies \nLEFT JOIN boxoffice ON movies.id = boxoffice.movie_id;\n\n# List all movies and their ratings in percent\nSELECT title, rating * 10 AS rating_percent FROM movies\nJOIN boxoffice ON movies.id = boxoffice.movie_id;\n\n# List all movies that were released on even number years\nSELECT title, year FROM movies WHERE year % 2 = 0;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20250603203556-2o897qp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250603203556-2o897qp","updated":"20250603203556"},"Children":[{"ID":"20250603203556-alqc74p","Type":"NodeParagraph","Properties":{"id":"20250603203556-alqc74p","updated":"20250604094826"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"聚合查询"}]},{"ID":"20250604094838-288o5ef","Type":"NodeList","ListData":{},"Properties":{"id":"20250604094838-288o5ef","updated":"20250604094838"},"Children":[{"ID":"20250604094838-37acnr5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250604094838-37acnr5","updated":"20250604094838"},"Children":[{"ID":"20250604094838-j69h073","Type":"NodeParagraph","Properties":{"id":"20250604094838-j69h073","updated":"20250604094938"},"Children":[{"Type":"NodeText","Data":"聚合表达式（或函数）：汇总了有关一组数据行的信息。如果没有指定的分组，每个聚合函数都将在整个结果行集上运行并返回单个值。与普通表达式一样，为聚合函数提供别名可确保结果更易于读取和处理。"}]}]},{"ID":"20250604094906-o2v6xt1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250604094906-o2v6xt1","updated":"20250604094906"},"Children":[{"ID":"20250604094906-2lp9zqg","Type":"NodeParagraph","Properties":{"id":"20250604094906-2lp9zqg","updated":"20250604094959"},"Children":[{"Type":"NodeText","Data":"常见的聚合函数"}]}]}]},{"ID":"20250604095016-ehgj9nr","Type":"NodeTable","TableAligns":[0,0],"Properties":{"colgroup":"width: 144px;|width: 602px;","id":"20250604095016-ehgj9nr","updated":"20250604095043"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"Function  功能"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"Description  描述"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"COUNT("},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"*"}]},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":")"},{"Type":"NodeText","Data":", "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"COUNT("},{"Type":"NodeText","Data":"column"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":")"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"A common function used to counts the number of rows in the group if no column name is specified. Otherwise, count the number of rows in the group with non-NULL values in the specified column. 一个常用函数，用于在未指定列名时对组中的行数进行计数。否则，对指定列中具有非 NULL 值的组中的行数进行计数。"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"MIN("},{"Type":"NodeText","Data":"column"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":")"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Finds the smallest numerical value in the specified column for all rows in the group. 查找组中所有行的指定列中的最小数值。"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"MAX("},{"Type":"NodeText","Data":"column"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":")"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Finds the largest numerical value in the specified column for all rows in the group. 在指定列中查找组中所有行的最大数值。"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"AVG("},{"Type":"NodeText","Data":"column)"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Finds the average numerical value in the specified column for all rows in the group. 在指定列中查找组中所有行的平均数值。"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"SUM("},{"Type":"NodeText","Data":"column"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":")"},{"Type":"NodeText","Data":" "}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Finds the sum of all numerical values in the specified column for the rows in the group. 查找组中各行的指定列中所有数值的总和。"}]}]}]},{"ID":"20250604095011-ltx2xen","Type":"NodeList","ListData":{},"Properties":{"id":"20250604095011-ltx2xen","updated":"20250604095011"},"Children":[{"ID":"20250604095004-8js1d0g","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250604095004-8js1d0g","updated":"20250604095004"},"Children":[{"ID":"20250604095004-zozozwx","Type":"NodeParagraph","Properties":{"id":"20250604095004-zozozwx","updated":"20250604095207"},"Children":[{"Type":"NodeText","Data":"分组聚合函数：除了跨所有行进行聚合之外，还可以将聚合函数应用于该组中的各个数据组。然后，这将创建与 GROUP BY 子句定义的唯一组一样多的结果。"}]}]},{"ID":"20250604095657-8jubc8a","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250604095657-8jubc8a","updated":"20250604095657"},"Children":[{"ID":"20250604095657-9l1addz","Type":"NodeParagraph","Properties":{"id":"20250604095657-9l1addz","updated":"20250604095706"},"Children":[{"Type":"NodeText","Data":"GROUP BY 子句：将指定列中具有相同值的行分组。"}]}]}]},{"ID":"20250604095715-iowxx6u","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250604095715-iowxx6u","updated":"20250604100050"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# Find the longest time that an employee has been at the studio\nSELECT MAX(years_employed) FROM employees;\n\n# For each role, find the average number of years employed by employees in that role\nSELECT role, AVG(years_employed) FROM employees GROUP BY role;\n\n# Find the total number of employee years worked in each building\nSELECT building, SUM(years_employed) FROM employees GROUP BY building;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250604095716-ob6v8oz","Type":"NodeList","ListData":{},"Properties":{"id":"20250604095716-ob6v8oz","updated":"20250604095716"},"Children":[{"ID":"20250604095712-pxj6p8e","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250604095712-pxj6p8e","updated":"20250604095712"},"Children":[{"ID":"20250604095712-x1papmq","Type":"NodeParagraph","Properties":{"id":"20250604095712-x1papmq","updated":"20250604100426"},"Children":[{"Type":"NodeText","Data":"HAVING 子句：与 GROUP BY 子句一起使用，以从结果集中过滤分组的行。"}]}]}]},{"ID":"20250604100432-dle5xi3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250604100432-dle5xi3","updated":"20250604101745"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# 示例\nSELECT group_by_column, AGG_FUNC(column_expression) AS aggregate_result_alias, …\nFROM mytable\nWHERE condition\nGROUP BY column\nHAVING group_condition;\n\n# 练习\n# Find the number of Artists in the studio (without a HAVING clause)\nSELECT COUNT(role) FROM employees WHERE role = \"Artist\";\n\n# Find the number of Employees of each role in the studio\nSELECT role,COUNT(role) FROM employees GROUP BY role;\n\n# Find the total number of years employed by all Engineers\nSELECT SUM(years_employed) FROM employees WHERE role = \"Engineer\";\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20250604100429-i0agttg","Type":"NodeList","ListData":{},"Properties":{"id":"20250604100429-i0agttg","updated":"20250604102823"},"Children":[{"ID":"20250604101801-ikny6dn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250604101801-ikny6dn","updated":"20250604102823"},"Children":[{"ID":"20250604101801-kczsytz","Type":"NodeParagraph","Properties":{"id":"20250604101801-kczsytz","updated":"20250604101805"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"查询的执行顺序"}]},{"ID":"20250604102049-djtxoyq","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20250604102049-djtxoyq","updated":"20250604102823"},"Children":[{"ID":"20250604102048-78rfhso","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20250604102048-78rfhso","updated":"20250604102048"},"Children":[{"ID":"20250604102048-ufn3loy","Type":"NodeParagraph","Properties":{"id":"20250604102048-ufn3loy","updated":"20250604102130"},"Children":[{"Type":"NodeText","Data":"首先"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"执行 FROM 子句和后续的 JOIN"},{"Type":"NodeText","Data":" 以"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"确定正在查询的数据的总工作集"},{"Type":"NodeText","Data":"，包括此子句中的子查询，并可能导致在后台创建临时表，其中包含要联接的表的所有列和行。"}]}]},{"ID":"20250604102210-e02yusn","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20250604102210-e02yusn","updated":"20250604102210"},"Children":[{"ID":"20250604102210-oaa7yl0","Type":"NodeParagraph","Properties":{"id":"20250604102210-oaa7yl0","updated":"20250604102450"},"Children":[{"Type":"NodeText","Data":"一旦有了完整的工作数据集， "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"WHERE 约束"},{"Type":"NodeText","Data":"就会应用于各个行，不满足约束的行就会被丢弃。每个约束只能直接从 FROM 子句中请求的表中访问列。 在大多数数据库中无法访问 SELECT 部分中的别名，因为它们可能包含依赖于尚未执行的查询部分的表达式。"}]}]},{"ID":"20250604102512-vtvrrv2","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20250604102512-vtvrrv2","updated":"20250604102512"},"Children":[{"ID":"20250604102512-doffjw9","Type":"NodeParagraph","Properties":{"id":"20250604102512-doffjw9","updated":"20250604102620"},"Children":[{"Type":"NodeText","Data":"根据 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"GROUP BY 子句"},{"Type":"NodeText","Data":"中指定的列中的公共值对应用 WHERE 约束后的其余行进行分组。作为分组的结果，行数将与该列中的唯一值的数量相同。"}]}]},{"ID":"20250604102621-8g4dyml","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20250604102621-8g4dyml","updated":"20250604102621"},"Children":[{"ID":"20250604102621-7b7x874","Type":"NodeParagraph","Properties":{"id":"20250604102621-7b7x874","updated":"20250604102656"},"Children":[{"Type":"NodeText","Data":"如果查询具有 GROUP BY 子句，则 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"HAVING 子句"},{"Type":"NodeText","Data":"中的约束将应用于分组行，丢弃不满足约束的分组行。类似 WHERE 子句，在大多数数据库中，也无法从此步骤访问别名。"}]}]},{"ID":"20250604102638-l74jk97","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20250604102638-l74jk97","updated":"20250604102638"},"Children":[{"ID":"20250604102638-vbi5ivf","Type":"NodeParagraph","Properties":{"id":"20250604102638-vbi5ivf","updated":"20250604102703"},"Children":[{"Type":"NodeText","Data":"最终计算查询的 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"SELECT 部分"},{"Type":"NodeText","Data":"中的表达式。"}]}]},{"ID":"20250604102705-d9v76i2","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Ni4=","Num":6},"Properties":{"id":"20250604102705-d9v76i2","updated":"20250604102705"},"Children":[{"ID":"20250604102705-tgkx0qv","Type":"NodeParagraph","Properties":{"id":"20250604102705-tgkx0qv","updated":"20250604102722"},"Children":[{"Type":"NodeText","Data":"在剩余行中，将丢弃标记为 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"DISTINCT 的列"},{"Type":"NodeText","Data":"中具有重复值的行。"}]}]},{"ID":"20250604102731-gzzo8j0","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Ny4=","Num":7},"Properties":{"id":"20250604102731-gzzo8j0","updated":"20250604102731"},"Children":[{"ID":"20250604102731-qohvyvb","Type":"NodeParagraph","Properties":{"id":"20250604102731-qohvyvb","updated":"20250604102801"},"Children":[{"Type":"NodeText","Data":"如果 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"ORDER BY 子句"},{"Type":"NodeText","Data":"指定了顺序，则行将按指定数据按升序或降序排序。由于已计算查询的 SELECT 部分中的所有表达式，此子句中可以引用别名。"}]}]},{"ID":"20250604102802-e3a4c0m","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"OC4=","Num":8},"Properties":{"id":"20250604102802-e3a4c0m","updated":"20250604102823"},"Children":[{"ID":"20250604102802-2hic3zd","Type":"NodeParagraph","Properties":{"id":"20250604102802-2hic3zd","updated":"20250604102823"},"Children":[{"Type":"NodeText","Data":"最后超出 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"LIMIT 和 OFFSET"},{"Type":"NodeText","Data":" 指定范围的行将被丢弃，留下从查询返回的最终集合。"}]}]}]}]}]},{"ID":"20250604095656-dwco5o8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250604095656-dwco5o8","updated":"20250604103430"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# 示例\nSELECT DISTINCT column, AGG_FUNC(column_or_expression), …\nFROM mytable\n    JOIN another_table\n      ON mytable.column = another_table.column\n    WHERE constraint_expression\n    GROUP BY column\n    HAVING constraint_expression\n    ORDER BY column ASC/DESC\n    LIMIT count OFFSET COUNT;\n# 练习\n# Find the number of movies each director has directed\nSELECT director,COUNT(*) FROM movies GROUP BY director;\n\n# Find the total domestic and international sales that can be attributed to each director\nSELECT director,SUM(domestic_sales + international_sales) FROM boxoffice\nJOIN movies ON boxoffice.movie_id = movies.id\nGROUP BY director;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250604101936-d169a7e","Type":"NodeList","ListData":{},"Properties":{"id":"20250604101936-d169a7e","updated":"20250604112807"},"Children":[{"ID":"20250604101938-3edzz7w","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250604101938-3edzz7w","updated":"20250604104412"},"Children":[{"ID":"20250604101938-4k2ejbp","Type":"NodeParagraph","Properties":{"id":"20250604101938-4k2ejbp","updated":"20250604110512"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"增删改——行"}]},{"ID":"20250604104355-2cumfpx","Type":"NodeList","ListData":{},"Properties":{"id":"20250604104355-2cumfpx","updated":"20250604104408"},"Children":[{"ID":"20250604104400-p18wzqs","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250604104400-p18wzqs","updated":"20250604104408"},"Children":[{"ID":"20250604104400-eaafxwk","Type":"NodeParagraph","Properties":{"id":"20250604104400-eaafxwk","updated":"20250604104408"},"Children":[{"Type":"NodeText","Data":"增"}]}]}]},{"ID":"20250604103530-8mds83n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250604103530-8mds83n","updated":"20250604104348"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# 包含所有列的值的 Insert 语句\nINSERT INTO mytable\nVALUES (value_or_expr, another_value_or_expr, …),\n       (value_or_expr_2, another_value_or_expr_2, …),\n       …;\n\n# 具有特定列的语句\nINSERT INTO mytable\n(column, another_column, …)\nVALUES (value_or_expr, another_value_or_expr, …),\n      (value_or_expr_2, another_value_or_expr_2, …),\n      …;\n\n# 练习\n# Add the studio's new production, Toy Story 4 to the list of movies (you can use any director)\nINSERT INTO movies VALUES (4, \"Toy Story 4\", \"John Lasseter\", 2000, 89);\n\n# Toy Story 4 has been released to critical acclaim! It had a rating of 8.7, and made 340 million domestically and 270 million internationally. Add the record to the BoxOffice table.\nINSERT INTO Boxoffice VALUES (4, 8.7, 340000000,240000000)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250604103531-lv81pl4","Type":"NodeList","ListData":{},"Properties":{"id":"20250604103531-lv81pl4","updated":"20250604103531"},"Children":[{"ID":"20250604104418-a1wzk9w","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250604104418-a1wzk9w","updated":"20250604104418"},"Children":[{"ID":"20250604104418-srhq035","Type":"NodeParagraph","Properties":{"id":"20250604104418-srhq035","updated":"20250604104423"},"Children":[{"Type":"NodeText","Data":"改"}]}]}]},{"ID":"20250604104426-go693yk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250604104426-go693yk","updated":"20250604105831"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# 示例\nUPDATE mytable\nSET column = value_or_expr, \n    other_column = another_value_or_expr, \n    …\nWHERE condition;\n\n# 练习\n# The director for A Bug's Life is incorrect, it was actually directed by John Lasseter\nUPDATE movies\nSET director = \"John Lasseter\"\nWHERE title = \"A Bug's Life\"\n\n# The year that Toy Story 2 was released is incorrect, it was actually released in 1999\nUPDATE movies\nSET year = \"1999\"\nWHERE title = \"Toy Story 2\"\n\n# Both the title and director for Toy Story 8 is incorrect! The title should be \"Toy Story 3\" and it was directed by Lee Unkrich\nUPDATE movies\nSET title = \"Toy Story 3\",\n    director = \"Lee Unkrich\"\nWHERE title = \"Toy Story 8\"\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250604104427-u9mk0pw","Type":"NodeList","ListData":{},"Properties":{"id":"20250604104427-u9mk0pw","updated":"20250604104427"},"Children":[{"ID":"20250604105848-99nw1xz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250604105848-99nw1xz","updated":"20250604105848"},"Children":[{"ID":"20250604105848-415r0iv","Type":"NodeParagraph","Properties":{"id":"20250604105848-415r0iv","updated":"20250604105854"},"Children":[{"Type":"NodeText","Data":"删"}]}]}]},{"ID":"20250604105854-ekvwsxr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250604105854-ekvwsxr","updated":"20250604110454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# 删除带条件的语句\nDELETE FROM mytable\nWHERE condition;\n\n# 练习\n# This database is getting too big, lets remove all movies that were released before 2005.\nDELETE FROM movies WHERE year \u003c 2005\n\n# Andrew Stanton has also left the studio, so please remove all movies directed by him.\nDELETE FROM movies  \nWHERE director = \"Andrew Stanton\"\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20250604103446-2g70j07","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250604103446-2g70j07","updated":"20250604112807"},"Children":[{"ID":"20250604103446-ekjcmus","Type":"NodeParagraph","Properties":{"id":"20250604103446-ekjcmus","updated":"20250604110524"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"增删改——表"}]},{"ID":"20250604110835-bex4b81","Type":"NodeTable","TableAligns":[0,0],"Properties":{"colgroup":"width: 132px;|","id":"20250604110835-bex4b81","updated":"20250604110905"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"Data type  数据类型"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"Description  描述"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"INTEGER"},{"Type":"NodeText","Data":"​, "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"BOOLEAN"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"The integer datatypes can store whole integer values like the count of a number or an age. In some implementations, the boolean value is just represented as an integer value of just 0 or 1. 整数数据类型可以存储整数值，例如数字或年龄的计数。在某些 implementations 中，boolean 值仅表示为仅 0 或 1 的整数值。"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"FLOAT"},{"Type":"NodeText","Data":"​, "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"DOUBLE"},{"Type":"NodeText","Data":"​, "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"REAL"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"The floating point datatypes can store more precise numerical data like measurements or fractional values. Different types can be used depending on the floating point precision required for that value. 浮点数据类型可以存储更精确的数值数据，如测量值或小数值。可以使用不同的类型，具体取决于该值所需的浮点精度。"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CHARACTER(num_chars)"},{"Type":"NodeText","Data":"​, "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"VARCHAR(num_chars)"},{"Type":"NodeText","Data":"​, "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TEXT"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"The text based datatypes can store strings and text in all sorts of locales. The distinction between the various types generally amount to underlaying efficiency of the database when working with these columns. 基于文本的数据类型可以在各种 locale 中存储字符串和文本。在使用这些列时，各种类型的区别通常相当于数据库效率的基础。"},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"Both the CHARACTER and VARCHAR (variable character) types are specified with the max number of characters that they can store (longer values may be truncated), so can be more efficient to store and query with big tables. CHARACTER 和 VARCHAR （可变字符） 类型都指定了它们可以存储的最大字符数（较长的值可能会被截断），因此可以更有效地存储和查询大表。"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"DATE"},{"Type":"NodeText","Data":"​, "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"DATETIME"},{"Type":"NodeText","Data":"​ "}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"SQL can also store date and time stamps to keep track of time series and event data. They can be tricky to work with especially when manipulating data across timezones. SQL 还可以存储日期和时间戳，以跟踪时间序列和事件数据。它们可能很难使用，尤其是在跨时区处理数据时。"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"BLOB"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Finally, SQL can store binary data in blobs right in the database. These values are often opaque to the database, so you usually have to store them with the right metadata to requery them. 最后，SQL 可以直接将二进制数据存储在数据库中的 blob 中。这些值通常对数据库不透明，因此您通常必须将它们与正确的元数据一起存储以重新查询它们。"}]}]}]},{"ID":"20250604111219-v8ggoa3","Type":"NodeTable","TableAligns":[0,0],"Properties":{"colgroup":"width: 139px;|","id":"20250604111219-v8ggoa3","updated":"20250604111219"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"Constraint  约束"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"Description  描述"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"PRIMARY KEY"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"This means that the values in this column are unique, and each value can be used to identify a single row in this table. 这意味着此列中的值是唯一的，并且每个值都可用于标识此表中的单个行。"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AUTOINCREMENT"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"For integer values, this means that the value is automatically filled in and incremented with each row insertion. Not supported in all databases. 对于整数值，这意味着该值会在每次插入行时自动填充和递增。并非在所有数据库中都受支持。"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UNIQUE"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"This means that the values in this column have to be unique, so you can't insert another row with the same value in this column as another row in the table. Differs from the "},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"`"}]},{"Type":"NodeText","Data":"PRIMARY KEY"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"`"}]},{"Type":"NodeText","Data":" in that it doesn't have to be a key for a row in the table. 这意味着此列中的值必须是唯一的，因此您不能在此列中插入与表中另一行具有相同值的其他行。与 'PRIMARY KEY' 的不同之处在于，它不必是表中一行的键。"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"NOT NULL"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"This means that the inserted value can not be "},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"`"}]},{"Type":"NodeText","Data":"NULL"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"`"}]},{"Type":"NodeText","Data":". 这意味着插入的值不能为 'NULL'。"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CHECK (expression)"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"This allows you to run a more complex expression to test whether the values inserted are valid. For example, you can check that values are positive, or greater than a specific size, or start with a certain prefix, etc. 这允许您运行更复杂的表达式来测试插入的值是否有效。例如，您可以检查值是否为正值，或大于特定大小，或以特定前缀开头，等等。"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"FOREIGN KEY"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"This is a consistency check which ensures that each value in this column corresponds to another value in a column in another table. 这是一项一致性检查，可确保此列中的每个值都对应于另一个表的列中的另一个值。"},{"Type":"NodeBr","Data":"br"},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"For example, if there are two tables, one listing all Employees by ID, and another listing their payroll information, the "},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"`"}]},{"Type":"NodeText","Data":"FOREIGN KEY"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"`"}]},{"Type":"NodeText","Data":" can ensure that every row in the payroll table corresponds to a valid employee in the master Employee list. 例如，如果有两个表，一个按 ID 列出所有 Employees，另一个列出他们的工资单信息，则 'FOREIGN KEY' 可以确保工资单表中的每一行都对应于主 Employee 列表中的有效员工。"}]}]}]},{"ID":"20250604112148-ql6841f","Type":"NodeList","ListData":{},"Properties":{"id":"20250604112148-ql6841f","updated":"20250604112155"},"Children":[{"ID":"20250604112150-077jmc4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250604112150-077jmc4","updated":"20250604112155"},"Children":[{"ID":"20250604112150-a5n7mif","Type":"NodeParagraph","Properties":{"id":"20250604112150-a5n7mif","updated":"20250604112155"},"Children":[{"Type":"NodeText","Data":"增"}]}]}]},{"ID":"20250604110558-mwemt9w","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250604110558-mwemt9w","updated":"20250604112122"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# 创建具有可选表约束和默认值的 table 语句\nCREATE TABLE IF NOT EXISTS mytable (\n    column DataType TableConstraint DEFAULT default_value,\n    another_column DataType TableConstraint DEFAULT default_value,\n    …\n);\n\n# 示例\nCREATE TABLE movies (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    director TEXT,\n    year INTEGER, \n    length_minutes INTEGER\n);\n\n# 练习\n# Create a new table named Database with the following columns:\n# – Name A string (text) describing the name of the database\n# – Version A number (floating point) of the latest version of this database\n# – Download_count An integer count of the number of times this database was downloaded\n# This table has no constraints. \nCREATE TABLE Database(\n    id INTEGER PRIMARY KEY,\n    Name VERCHAR(50),\n    Version INTEGER,\n    Download_count INTEGER\n);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250604110600-pfj5mv1","Type":"NodeList","ListData":{},"Properties":{"id":"20250604110600-pfj5mv1","updated":"20250604112203"},"Children":[{"ID":"20250604112201-d83sk65","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250604112201-d83sk65","updated":"20250604112203"},"Children":[{"ID":"20250604112201-mflhi8t","Type":"NodeParagraph","Properties":{"id":"20250604112201-mflhi8t","updated":"20250604112203"},"Children":[{"Type":"NodeText","Data":"改"}]}]}]},{"ID":"20250604112204-1ums70k","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250604112204-1ums70k","updated":"20250604112807"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# 更改表以添加新列\nALTER TABLE mytable\nADD column DataType OptionalTableConstraint \n    DEFAULT default_value;\n\n# 更改表以删除列\nALTER TABLE mytable\nDROP column_to_be_deleted;\n\n# 更改表名\nALTER TABLE mytable\nRENAME TO new_table_name;\n\n# 练习\n# Add a column named Aspect_ratio with a FLOAT data type to store the aspect-ratio each movie was released in.\nALTER TABLE movies \nADD Aspect_ratio FLOAT;\n\n# Add another column named Language with a TEXT data type to store the language that the movie was released in. Ensure that the default for this language is English.\nALTER TABLE movies \nADD Language  TEXT\nDEFAULT English;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250604112205-mk1p2w3","Type":"NodeList","ListData":{},"Properties":{"id":"20250604112205-mk1p2w3","updated":"20250604112205"},"Children":[{"ID":"20250604112928-i6h6h1h","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250604112928-i6h6h1h","updated":"20250604112928"},"Children":[{"ID":"20250604112928-t3kvvtp","Type":"NodeParagraph","Properties":{"id":"20250604112928-t3kvvtp","updated":"20250604112929"},"Children":[{"Type":"NodeText","Data":"删"}]}]}]},{"ID":"20250604112930-1bgy5ax","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250604112930-1bgy5ax","updated":"20250604113336"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs"},{"Type":"NodeCodeBlockCode","Data":"# 删除表\nDROP TABLE IF EXISTS mytable;\n\n# 练习\n# We've sadly reached the end of our lessons, lets clean up by removing the Movies table\nDROP TABLE IF EXISTS Movies;\n\n# And drop the BoxOffice table as well\nDROP TABLE IF EXISTS boxoffice;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]}]}