{"ID":"20250513171824-dngblsj","Spec":"1","Type":"NodeDocument","Properties":{"id":"20250513171824-dngblsj","title":"2019-MET-Metamorphic Relations for Detection of Performance Anomalies","type":"doc","updated":"20250513171904"},"Children":[{"ID":"20250513171844-xxih4fd","Type":"NodeParagraph","Properties":{"id":"20250513171844-xxih4fd","updated":"20250513171851"},"Children":[{"Type":"NodeText","Data":"(设计的MR：时间分布直方图模态是否相似)"}]},{"ID":"20250513171832-ihk3bsk","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20250513171832-ihk3bsk","updated":"20250513171904"},"Children":[{"Type":"NodeText","Data":"摘要"}]},{"ID":"20250513171832-bw39vc4","Type":"NodeParagraph","Properties":{"id":"20250513171832-bw39vc4","updated":"20250513171904"},"Children":[{"Type":"NodeText","Data":"蜕变关系可用于通过比较被测软件的连续运行来改进性能测试。我们检查了"},{"Type":"NodeTextMark","Properties":{"style":"background-color: var(--b3-card-info-background); color: var(--b3-card-info-color);"},"TextMarkType":"text","TextMarkTextContent":"页面加载时间"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"background-color: var(--b3-card-info-background); color: var(--b3-card-info-color);\"}"},{"Type":"NodeText","Data":"的一种这样的蜕变关系，我们用它来发现和修复 Adobe Experience Platform 启动标签管理器中的竞态条件（race condition）。页面加载时间的直方图具有不同的模式，这提醒我们存在错误。除了流行的平均值和标准差之外，我们还讨论了性能衡量的必要性。我们描述了两种自动确定模态的方法：高斯混合模型和多模态西尔弗曼测试。涉及这些性能测量的蜕变关系可用于提醒工程师注意性能异常的存在。"}]},{"ID":"20250513171832-70j92eh","Type":"NodeParagraph","Properties":{"id":"20250513171832-70j92eh","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"Introduction"}]},{"ID":"20250513171832-h7ssgj1","Type":"NodeParagraph","Properties":{"id":"20250513171832-h7ssgj1","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"性能测试是软件开发中常见且重要的任务。本文将讨论蜕变测试 (MT) [1]、[2] 在性能测试中的使用。具体来说，我们讨论了对支持信息保留和性能异常自动检测的更复杂措施的需求。 MT 的挑战之一是找到良好的蜕变关系 (MR) [3]、[4]、[5]。如果我们对被测系统有更全面、可重复和自动化的测量，那么识别 MR 的任务就会变得更容易。对于性能测试，平均值和标准差的计时通常是唯一使用的衡量标准。虽然简单且常见，但这些措施包含部分信息，并且可能很容易被误解。首先，平均值（μ）和标准差（SD）仅对正态分布的数据有意义。但是，时序数据很少遵循正态分布。其次，除了时间之外，还有一些有用的信息度量。通过包含频率集群和离群值分布的度量，我们可以根据其他有用信息开发其他关系，例如执行的代码路径、同步与异步性能以及环境稳定性等等。"}]},{"ID":"20250513171832-d34wgxd","Type":"NodeParagraph","Properties":{"id":"20250513171832-d34wgxd","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"预言机问题是指预言机不可用或太昂贵而无法应用的情况。例如，由于缺乏预言机，大数据分析软件很难测试[7]。同样，搜索引擎也很难测试[8]、[9]。 蜕变测试是一种基于属性的测试方法，可以有效缓解预言机问题。在 MT 中，测试人员不是专注于验证被测软件 (SUT) 的每个单独输出（可能无法获得预言机），而是检查 SUT 多次执行之间的预期关系（即蜕变关系或太太）。 MR 是软件预期功能的必要属性。因此，如果在某些输入上测试 SUT 时违反 MR，则 SUT 一定有故障。 MT 最初被提出作为一种验证技术 [1]、[2]，软件开发组织和最终用户程序员都可以使用它 [10]。后来它被扩展到一个统一的框架，涵盖验证、确认和其他类型的软件质量评估[11]。越来越多的研究针对各种应用领域研究了 MT 的概念 [5]、[12]。MT不仅应用于传统的软件测试，还应用于其他目的，例如网络安全增强[13]、[14]和系统理解[15]。近年来，应用机器翻译来测试智能（尤其是机器学习）和自主系统的趋势越来越明显[16]、[17]、[18]、[19]。特别是，周和孙结合了机器翻译和模糊测试，检测到现实生活中的自动驾驶汽车系统百度阿波罗的激光雷达障碍物感知模块中以前未知的致命软件故障，并在优步在亚利桑那州坦佩发生致命事故的八天前报告了令人震惊的结果，美国，2018 年 3 月[20]。最近，Segura 等人。 [21]、[22]建议MT可以用来揭示性能故障。在本研究中，我们在性能测试的背景下将 MT 应用于 Adobe Experience Platform Launch Tag Manager 软件。"}]},{"ID":"20250513171832-r47dlve","Type":"NodeParagraph","Properties":{"id":"20250513171832-r47dlve","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"CASE STUDY:ADOBE LAUNCH"}]},{"ID":"20250513171832-9i7l1ys","Type":"NodeParagraph","Properties":{"id":"20250513171832-9i7l1ys","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"许多网页使用来自第三方的 javascript 代码片段来识别访问者、收集有关人们如何使用其网站的信息、展示广告以及设置浏览器 Cookie。这些 javascript 片段称为标签。某些网站可能会在单个页面上使用数十个标签。标签管理器可用于简化使用这些标签的复杂性。标签管理器提供了一个界面来配置所有标签，并生成相应的 javascript 来提供为网站配置的所有功能。此生成的代码通常称为 “容器”。标签管理器的 javascript “包含” 标签的所有 javascript ，并编排网站上标签的执行顺序和条件。通过这种方式，页面上的所有标签都可以捆绑到一个或多个文件中，并且可以添加到HTML文档中，只需一个脚本标签。例如，要在没有标签管理器的页面上实施 Adobe Analytics （AA）、Experience Cloud ID 服务 （ECID） 和 Adobe Audience Manager （AAM），需要在页面的 HTML 中执行如下操作："}]},{"ID":"20250513171832-aodvtl2","Type":"NodeParagraph","Properties":{"id":"20250513171832-aodvtl2","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"\u003cscript src=\"VisitorApi.js\"\u003e\u003c/script\u003e \u003cscript src=\"AppMeasurement.js\"\u003e\u003c/script\u003e \u003cscript src=\"DIL.js\"\u003e\u003c/script\u003e \u003cscript\u003e //AppMeasurement Object Creation s_account=\"ujsltest\" s=s_gi(s_account) //Visitor Object Creation s.visitor = Visitor.getInstance( \"97D1F3F459CE0AD80A495CBE@AdobeOrg\") /* ... ... Additional AppMeasurement Object Configuration ... ... */ //DIL Object Creation var scDil = DIL.create({ partner: \"unifiedjslab\", visitorService:{namespace: \"97D1F3F459CE0AD80A495CBE@AdobeOrg\"}, containerNSID:0, uuidCookie: { name:\"aam_uuid\", days:30 } }) //DIL+AppMeasurement Integration DIL.modules.siteCatalyst.init(s,scDil, {names:[’pageName’,’campaign’,’channel’, ’state’,’zip’,’products’,’server’, ’prop1’,’eVar1’]}) s.t() //Make tracking call s.track() \u003cscript\u003e"}]},{"ID":"20250513171832-t6tnps7","Type":"NodeParagraph","Properties":{"id":"20250513171832-t6tnps7","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"相比之下，当使用Adobe Platform Experience Launch时，HTML实现被大大简化，所有的设置和配置都包含在一个库中："}]},{"ID":"20250513171832-hcqybtd","Type":"NodeParagraph","Properties":{"id":"20250513171832-hcqybtd","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"\u003cscript src=\"//assets.adobedtm.com/staging/ launch-EN1fb320484d8e4419b04396f7de7696d0development.min.js\"\u003e\u003c/script\u003e"}]},{"ID":"20250513171832-zgjzz6e","Type":"NodeParagraph","Properties":{"id":"20250513171832-zgjzz6e","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"Adobe Experience Platform Launch 是作为 Adobe Experience Platform 的一部分提供的最新标签管理器。Experience Platform Launch 使开发人员能够创建“扩展”，客户可以通过类似应用商店的体验将其安装在 Web 上。这些扩展将开发人员的标记集成到 Experience Platform Launch 容器中，并提供用于配置和部署标记的界面。使用标签管理器的一个好处是，可以通过简化下载和执行标签的过程来提高页面加载性能。某些标记管理器（包括 Experience Platform Launch）甚至可以通过允许容器中的标记使用提供通用功能的共享代码来减少重复代码。但是，使用标签管理器也有可能增加您网站的加载时间。毕竟，标签管理器“容器”本身包含必须下载、解析和执行的代码。"}]},{"ID":"20250513171832-7dkaimj","Type":"NodeParagraph","Properties":{"id":"20250513171832-7dkaimj","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"Bug discovery during quality assurance"}]},{"ID":"20250513171832-cy13t3c","Type":"NodeParagraph","Properties":{"id":"20250513171832-cy13t3c","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"作为 Experience Platform Launch 质量保证流程的一部分，我们希望测试标签管理容器的开销是否会降低页面加载时间的性能。为此，我们创建了测试页面，这些页面通过将 Adobe 标记直接放置在页面上来实施这些标记，以及通过 Experience Platform Launch 实施标记的测试页面。然后，我们可以比较页面的加载时间，以确定使用 Experience Platform Launch 的影响。我们预计这两个页面在功能上是相同的，但它们的页面加载性能可能会有所不同。我们的测试环境包括 Azure 上托管的网页和一台通过 Google Chrome 通过 Internet 访问这些测试页面的桌面计算机。页面加载时间是使用 Google Lighthouse 测量的。相同的测试运行了很多次，然后取平均值以过滤我们无法控制的变量的影响。这些不可控的变量包括服务器端性能和网络可变性。其中一项测试比较了没有标签管理器的性能，以及使用标签管理器 （Experience Platform Launch） 与三种 Adobe 产品的性能："}]},{"ID":"20250513171832-kjqhn4t","Type":"NodeParagraph","Properties":{"id":"20250513171832-kjqhn4t","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"• Adobe Analytics （AA） - Adobe Analytics 提供客户数据的报告、可视化和分析，使客户能够在决策过程中利用其数据。"}]},{"ID":"20250513171832-cydayv7","Type":"NodeParagraph","Properties":{"id":"20250513171832-cydayv7","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"• Experience Cloud ID 服务 （ECID） - ID 服务提供了一个通用的永久 ID，用于在 Experience Cloud 的所有解决方案中识别您的访客。"}]},{"ID":"20250513171832-pp3cuac","Type":"NodeParagraph","Properties":{"id":"20250513171832-pp3cuac","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"• Adobe Audience Manager （AAM） - Audience Manager 可帮助您管理数据管道。该服务是一种催化剂，可将通用用户和原始数据信号转换为用于多渠道营销工作的实际受众细分。"}]},{"ID":"20250513171832-ca8bplf","Type":"NodeParagraph","Properties":{"id":"20250513171832-ca8bplf","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"我们测试的一个性能指标是“首次绘制时间”，定义为从用户开始页面加载到页面的第一个像素绘制到屏幕之间的时间。这两个页面的首次绘制平均时间非常相似，差异小于 70 毫秒。然而，查看这两页的首次绘制时间的直方图揭示了一些不寻常的地方。虽然我们预计由于前面提到的不可控变量，测试运行之间会出现差异，但我们没有预料到实现之间的差异，因为两种实现都受到相同的不可控变量的影响。因此，我们预计直方图应该具有相似的结果分布，其中一个直方图被有效地平移或从另一个直方图水平移动，以表明平均性能的差异。事实上，所有实施各种 Adobe 标记组合的测试页面都是这种情况;两个单峰分布，一个是另一个的水平平移。这可以描述为以下蜕变关系："}]},{"ID":"20250513171832-ylqurho","Type":"NodeParagraph","Properties":{"id":"20250513171832-ylqurho","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"在使用和不使用标签管理器在页面上实施一组标签，每个页面的加载时间分布应具有相同的模式。"}]},{"ID":"20250513171832-qt3w030","Type":"NodeParagraph","Properties":{"id":"20250513171832-qt3w030","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20250513171832-8axoldk.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20250513171832-xf4456o","Type":"NodeParagraph","Properties":{"id":"20250513171832-xf4456o","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"对于 AA+ECID+AAM 的特定组合，没有标签管理器的场景是单峰分布，但 Experience Platform Launch 场景是双峰分布（图 1 的顶部）。这种与预期关系的差异或冲突表明存在潜在的功能错误。"}]},{"ID":"20250513171832-2xuih2g","Type":"NodeParagraph","Properties":{"id":"20250513171832-2xuih2g","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"经过进一步调查，发现在通过标签管理器实施这组标签时，引入了争用条件。此方案由以下事件序列组成：（1） AA 和 AAM 扩展是单独加载的，（2） AAM 扩展从 AA 扩展调用共享函数，然后 （3） AA 扩展发送其网络请求以跟踪网页浏览。但是，根据哪个库先完成加载，AAM 扩展并不总是能够在 AA 发送其跟踪请求之前调用共享函数。双峰分布是两个单峰分布合并在一起的结果;一个用于 AAM 能够在发送 AA 请求之前成功调用共享函数的情况，另一个用于在发送请求后调用函数的情况。因此，分布的模态差异是性能异常的警报。此外，这种模态差异提供了关于可能产生哪些类型的错误的提示。换句话说，我们的 metamorphic relationship 不仅检测 bug 的存在，还有助于调试它们。值得注意的是，这是通过分析性能测试数据发现的功能错误。"}]},{"ID":"20250513171832-m38yysb","Type":"NodeParagraph","Properties":{"id":"20250513171832-m38yysb","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"修复此 Race Condition 错误后，性能异常消失了，即标签管理器场景的性能直方图如预期的那样显示了单峰分布，如图 1 底部所示。表 I 显示了修复竞争条件前后页面加载时间的均值和标准偏差。"}]},{"ID":"20250513171832-0jydqck","Type":"NodeParagraph","Properties":{"id":"20250513171832-0jydqck","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"MEASURING MODALITY AUTOMATICALLY"}]},{"ID":"20250513171832-d22r8di","Type":"NodeParagraph","Properties":{"id":"20250513171832-d22r8di","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"将 MT 应用于性能测试的一个重要经验是，我们认识到需要从不同的角度进行更多的性能测量。时序的均值和标准差通常是性能测试中唯一使用的度量。如上面的研究所示，如果仅使用这些措施，则可能无法检测到竞争条件问题。为了定义良好的关系，我们需要确定好的度量，这些度量既能保留有价值的信息，又可以在测试时间和可用计算资源的约束下对生成的数据集进行计算。因此，Adobe 扩展了其性能度量，以包括两个经常被忽视的方面：（1） 模态信息和 （2） 异常值信息。通过计算和保留这些度量的值，将为未来的测试和创建新的关系提供关键信息。Modality 表示值的周期性变化。除非仔细控制性能测试，否则在测试期间将执行许多不同的代码路径。每个路径都有一个特征执行时间。其中许多时间会重叠，并且很难确定导致性能变化的路径。通常无法控制所有执行变量。在这种情况下，使用机器学习技术可以帮助确定许多不同代码路径之间的性能分布是否发生了变化。通常，每种模式都可以被视为一组性能等效的代码路径。如果模式的总数或幅度在性能测试阶段之间发生变化，这可能是问题的严重警报。 通过提供模态测量，警报（从技术上讲，这违反了相关的关系）可以自动标记并呈现给工程师进行详细调查。根据我们的发现，我们提出了一种更广义的关系形式，我们测试了这可能值得进一步研究："}]},{"ID":"20250513171832-d9ikb5t","Type":"NodeParagraph","Properties":{"id":"20250513171832-d9ikb5t","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"一致模态：如果两个页面实现相同的功能，则每个页面的加载时间分布应具有相同的模态"}]},{"ID":"20250513171832-vp4ki78","Type":"NodeParagraph","Properties":{"id":"20250513171832-vp4ki78","updated":"20250513171832"},"Children":[{"Type":"NodeText","Data":"除了模态之外，保留有关异常值的信息也很重要。参考与异常值相关的信息，可以揭示许多有问题的性能问题。因此，我们进一步探索了各种异常值的技术的使用，既用于数据的持久性，也作为改进模态预测的手段。"}]}]}