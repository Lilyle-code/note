{"ID":"20250513180701-l3c5osf","Spec":"1","Type":"NodeDocument","Properties":{"id":"20250513180701-l3c5osf","title":"2013-ICSE-Toddler: Detecting Performance Problems via Similar Memory-Access Patterns","type":"doc","updated":"20250513180718"},"Children":[{"ID":"20250513180709-reean5z","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20250513180709-reean5z","updated":"20250513180715"},"Children":[{"Type":"NodeText","Data":"摘要"}]},{"ID":"20250513180709-6f86m3o","Type":"NodeParagraph","Properties":{"id":"20250513180709-6f86m3o","updated":"20250513180709"},"Children":[{"Type":"NodeText","Data":"性能错误是导致性能显著下降的编程错误。虽然开发人员经常使用自动化 Oracle 来检测功能错误，但检测性能错误通常需要对执行配置文件进行耗时的手动分析。性能分析的人工工作限制了分析的性能测试的数量，并使性能错误能够轻松逃逸到生产环境中。遗憾的是，虽然分析器可以成功定位执行缓慢的代码，但分析器不能有效地用作自动化 oracle。本文介绍了 TODDLER，这是一种用于性能 bug 的新型自动化 oracle，它使性能 bug 测试能够使用完善的自动化功能 bug 测试过程。TODDLER 报告代码循环，其计算在循环迭代中具有重复且部分相似的内存访问模式。这种重复性工作可能是不必要的，并且可以更快地完成。我们实施了 TODDLER for Java，并在 9 个流行的 Java 代码库上对其进行了评估。我们对 11 个以前已知的实际性能 bug 的实验表明，TODDLER 发现这些 bug 的准确性高于标准 Java 分析器。使用 TODDLER，我们还在 6 个 Java 项目中发现了 42 个新错误：Ant、Google Core Libraries、JUnit、Apache Collections、JDK 和 JFreeChart。根据我们的 bug 报告，开发人员到目前为止修复了 10 个 bug，并确认了另外 6 个是真正的 bug。"}]},{"ID":"20250513180709-p7fel8n","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20250513180709-p7fel8n","updated":"20250513180718"},"Children":[{"Type":"NodeText","Data":"INTRODUCTION"}]},{"ID":"20250513180709-21oawnz","Type":"NodeParagraph","Properties":{"id":"20250513180709-21oawnz","updated":"20250513180709"},"Children":[{"Type":"NodeText","Data":"软件性能对于最终用户如何看待已部署软件的质量至关重要。性能错误是导致性能显著下降的编程错误[1]。即使软件已经成熟并由专业程序员编写，性能错误也会导致严重且广为人知的事件 [2]–[5]。检测和测试性能 bug 的最新技术仍处于初步阶段。因此，性能错误很容易逃逸到生产运行中，损害用户体验，降低系统吞吐量，并浪费计算资源 [6]， [7]。由于性能错误难以发现，因此它们甚至会影响经过充分测试的软件，例如 Windows 7 的 Windows 资源管理器，尽管它们对用户体验有严重影响，但其中有几个影响较大的性能错误在很长一段时间内都无法检测到 [8]。性能错误如此容易逃逸到生产环境的一个关键原因是，性能错误测试不能使用成熟的功能错误测试过程。“性能错误”在一些社区中是一个被广泛接受的术语，例如，Mozilla Bugzilla 将其定义为“影响速度或响应能力的 bug”[1]。但是，其他人更喜欢 “performance problem” 或 “performance issue”，因为这些问题与功能 bug 不同。我们对此不持任何立场，并交替使用“性能错误”和“性能问题”。使用自动化 oracle。自动化 Oracle 会检测测试是否触发了 （功能或性能） 错误，在这种情况下，开发人员需要检查测试。要测试功能错误，开发人员通常遵循三个步骤：（1） 编写测试预算允许的尽可能多的测试，（2） 运行这些测试并使用自动化的 oracle（例如、崩溃或断言）来查找哪些测试失败，以及 （3） 仅检查失败的测试。"}]},{"ID":"20250513180709-qsfm3sb","Type":"NodeParagraph","Properties":{"id":"20250513180709-qsfm3sb","updated":"20250513180709"},"Children":[{"Type":"NodeText","Data":"为了测试性能错误，开发人员通常会编写少量测试，使用分析器来定位执行时间较长的代码区域，然后推断这些区域是否可以优化，以及为优化所花费的努力（时间、增加的代码复杂性）是否值得潜在的速度提升（在实际执行优化之前可能很难确定）。与功能错误相反，缺乏可靠的性能错误自动化 oracle 意味着开发人员无法轻松找到哪些测试失败，如步骤 （2） 所示。因此，由于开发人员需要检查步骤 （3） 中的所有测试/配置文件，因此他们只能在步骤 （1） 中使用少量的性能测试。总之，开发人员遵循当前的性能错误测试过程不是因为它有优势，而是因为开发人员没有可靠的替代方案。"}]},{"ID":"20250513180709-6edxfg9","Type":"NodeParagraph","Properties":{"id":"20250513180709-6edxfg9","updated":"20250513180709"},"Children":[{"Type":"NodeText","Data":"用于性能错误的自动化 oracle 将使开发人员能够使用完善的功能错误测试过程来测试性能错误。遗憾的是，分析器不能用作有效的 oracle，原因有三。首先，分析器为每个测试提供一份报告，因此运行许多测试会导致许多报告，而不是像典型的函数式 oracle 那样只运行一些失败的测试。其次，分析器可能会错过性能错误，即使执行它时也是如此：如果有问题的代码与该执行的其余部分相比并不慢，则分析器不会将其排在高位，并且可能会被开发人员忽略。许多性能错误表现为仅在特定输入条件下 [8]–[11] 显著降低性能，并且分析的输入无法涵盖所有可能的情况。 第三，分析器报告什么需要时间，但不报告什么浪费时间，即，它们没有区分真正必要（尽管昂贵）的工作和可能不必要的计算。换句话说，当开发人员想要本地化慢速代码区域时，分析器非常有用，但当开发人员需要确定测试是否可能暴露性能错误并因此需要进一步检查时，分析器就无效了。"}]},{"ID":"20250513180709-bxgx3bl","Type":"NodeParagraph","Properties":{"id":"20250513180709-bxgx3bl","updated":"20250513180709"},"Children":[{"Type":"NodeText","Data":"本文介绍了 TODDLER，这是一种用于性能 bug 的新型 oracle。简而言之，TODDLER 报告执行循环的测试，这些循环的计算是重复的，并且在迭代之间非常相似。直觉是，这样的循环很可能是浪费时间的性能错误：因为工作是重复的和相似的，所以它可以更快地完成。我们根据对性能 bug 的两项观察来设计 TODDLER。首先，嵌套循环包含许多严重的性能错误（在第 II 节的研究中超过 50%）：如果在嵌套循环之外执行低效的代码区域，那么低效本身需要非常严重（例如，缓慢的 I/O），代码区域才会对整体程序性能产生真正的影响。其次，浪费的计算通常反映在循环迭代中重复且部分相似的内存访问上：如果一组指令重复访问相似的内存值，那么这些指令可能会计算出相似的结果。我们为 Java 实现了一个成熟的 TODDLER 工具和一个简单的 C/C++ 原型。我们对来自 9 个 Java 项目的 11 个以前已知的实际性能错误进行的实验表明，TODDLER 能够找到所有这些错误。我们的 C/C++ 原型还在 GCC、Mozilla 和 MySQL 中发现了 6 个以前已知的错误。 此外，使用 TODDLER 帮助我们在 6 个流行的 Java 项目中发现了 42 个新的实际错误：Ant、Google Core Libraries、JUnit、Apache Collections、JDK 和 JFreeChart。根据我们的报告，开发者目前已经修复了 10 个 bug，并确认了另外 6 个是真正的 bug，Apache Collections 的开发者甚至邀请了第一位论文作者成为项目提交者。我们的 bug 报告链接自"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"http://mir.cs.illinois.edu/toddler","TextMarkTextContent":"http://mir.cs.illinois.edu/toddler"},{"Type":"NodeText","Data":"。"}]}]}