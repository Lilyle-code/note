{"ID":"20250513175932-5f5ppuj","Spec":"1","Type":"NodeDocument","Properties":{"id":"20250513175932-5f5ppuj","title":"2018-ISSRE-DeepMutation: Mutation Testing of Deep Learning Systems","type":"doc","updated":"20250513175947"},"Children":[{"ID":"20250513175941-i79kak5","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20250513175941-i79kak5","updated":"20250513175944"},"Children":[{"Type":"NodeText","Data":"摘要"}]},{"ID":"20250513175941-2qo2a5a","Type":"NodeParagraph","Properties":{"id":"20250513175941-2qo2a5a","updated":"20250513175941"},"Children":[{"Type":"NodeText","Data":"深度学习（DL）定义了一种新的数据驱动编程范式，其中内部系统逻辑在很大程度上由训练数据塑造。评估深度学习模型的标准方法是在测试数据集上检查其性能。测试数据集的质量对于获得训练模型的信心至关重要。使用不适当的测试数据集，即使深度学习模型在测试数据集上取得了高准确率，也可能缺乏通用性和鲁棒性。在传统的软件测试中，突变测试是一种用于评估测试套件质量的成熟技术，它分析测试套件检测注入故障的程度。然而，由于传统软件与基于深度学习的软件之间的根本差异，传统的突变测试技术不能直接应用于深度学习系统。在本文中，我们提出了一种专门针对深度学习系统的突变测试框架，以衡量测试数据的质量。为此，通过分享传统软件中突变测试的相同精神，我们首先定义了一组源级突变算子，以向深度学习的源（即训练数据和训练程序）注入故障。 然后我们设计了一套模型级别的变异算子，这些算子可以直接将故障注入到深度学习模型中，而不需要训练过程。最终，可以通过对注入的故障检测程度的分析来评估测试数据的质量。所提出的变异测试技术在两个公开数据集（MNIST 和 CIFAR-10）以及三个深度学习模型上展示了其有效性。"}]},{"ID":"20250513175941-z2b7jpn","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20250513175941-z2b7jpn","updated":"20250513175947"},"Children":[{"Type":"NodeText","Data":"SOURCE-LEVEL MUTATION TESTING OF DL SYSTEMS"}]},{"ID":"20250513175941-amjdzhh","Type":"NodeParagraph","Properties":{"id":"20250513175941-amjdzhh","updated":"20250513175941"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20250513175941-cu02ot3.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20250513175941-2uc0qua","Type":"NodeParagraph","Properties":{"id":"20250513175941-2uc0qua","updated":"20250513175941"},"Children":[{"Type":"NodeText","Data":"一般来说，传统的软件大多是由开发人员以源代码的形式编写的(图1 )，这可能是缺陷引入的主要来源。变异测试通过轻微地修改程序代码来引入错误，从而能够通过检测这种有意的变化来衡量测试数据的质量。与传统软件的变异测试精神相同，直接在DL系统的编程源中引入潜在的缺陷是创建变异体的合理方法。在这一部分，我们提出了一种针对DL系统的源级变异测试技术。我们为DL系统设计了一个通用的变异测试工作流程，并提出了一组变异算子作为关键组件。"}]},{"ID":"20250513175941-73hcx6z","Type":"NodeParagraph","Properties":{"id":"20250513175941-73hcx6z","updated":"20250513175941"},"Children":[{"Type":"NodeText","Data":"图 3 显示了我们的源级突变测试技术的关键工作流程。在初始化阶段，DL 开发人员准备一个训练程序 P 和一组训练数据 D。在使用 D 运行 P 的训练过程之后，获得了 DL 模型 M。当突变测试开始时，通过应用突变运算符（在表 I 中定义）对原始训练数据 D 和程序 P 进行轻微修改，并生成相应的突变体 D′ 和 P ′。在下一步中，训练数据突变体或训练程序突变体参与训练过程，以生成突变的 DL 模型 M ′。当获得突变的 DL 模型时，它们将针对过滤后的测试集 T ′ 执行和分析，以评估测试数据的质量.2 我们强调，本文中提出的突变运算符并非旨在直接模拟人为错误;相反，它们旨在提供定量测量测试数据集质量的方法。特别是，原始 DL 模型与 T ′ 可以检测到的突变模型（由突变算子生成）之间的行为差异越多，表明 T ′ 的质量越高。详细的质量测量指标在第 III-C 节中定义。"}]}]}