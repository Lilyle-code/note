{"ID":"20250513175818-bm0e9t4","Spec":"1","Type":"NodeDocument","Properties":{"id":"20250513175818-bm0e9t4","title":"2018-ASE-DeepGauge: Multi-Granularity Testing Criteria for Deep Learning Systems（多粒度）","type":"doc","updated":"20250513175915"},"Children":[{"ID":"20250513175829-lk1vy7v","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20250513175829-lk1vy7v","updated":"20250513175839"},"Children":[{"Type":"NodeText","Data":"摘要"}]},{"ID":"20250513175829-hu40ntv","Type":"NodeParagraph","Properties":{"id":"20250513175829-hu40ntv","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"深度学习 （DL） 定义了一种新的数据驱动编程范式，它通过一组训练数据构建了精心设计的神经元网络的内部系统逻辑。我们已经看到 DL 在许多安全关键场景中得到广泛采用。然而，大量研究表明，最先进的 DL 系统存在各种漏洞，当应用于实际应用时可能会导致严重后果。目前，深度学习系统的测试充分性通常是通过测试数据的准确性来衡量的。考虑到高质量测试数据可获取的局限性，良好的测试数据精度性能很难为深度学习系统的测试充分性和通用性提供信心。与具有清晰可控逻辑和功能的传统软件系统不同，DL 系统缺乏可解释性，这使得系统分析和缺陷检测变得困难，这可能会阻碍其实际部署。在本文中，我们提出了 DeepGauge，这是一套针对 DL 系统的多粒度测试标准，旨在对测试平台进行多方面的描述。对我们提出的测试标准的深入评估在两个知名数据集、五个 DL 系统以及四种针对 DL 的最先进的对抗性攻击技术上进行了演示。DeepGauge 的潜在用途为构建更通用和更强大的 DL 系统提供了启示。"}]},{"ID":"20250513175839-ae1pxcf","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20250513175839-ae1pxcf","updated":"20250513175840"},"Children":[{"Type":"NodeText","Data":"PRELIMINARIES"}]},{"ID":"20250513175829-6enjw0n","Type":"NodeList","ListData":{},"Properties":{"id":"20250513175829-6enjw0n","updated":"20250513175829"},"Children":[{"ID":"20250513175829-e991ykv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250513175829-e991ykv","updated":"20250513175829"},"Children":[{"ID":"20250513175829-hg89nwd","Type":"NodeParagraph","Properties":{"id":"20250513175829-hg89nwd","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"传统软件中的覆盖率标准"}]}]},{"ID":"20250513175829-tbpj2lr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250513175829-tbpj2lr","updated":"20250513175829"},"Children":[{"ID":"20250513175829-eiepahr","Type":"NodeParagraph","Properties":{"id":"20250513175829-eiepahr","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"DNN架构"}]}]}]},{"ID":"20250513175829-kqb4teq","Type":"NodeParagraph","Properties":{"id":"20250513175829-kqb4teq","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"在我们的论文中，我们将深度学习系统视为任何包含一个或多个深度神经网络（DNNs）的软件系统。与传统的软件不同，传统的软件是由开发者使用确定性算法编写的，而 DNNs 是由训练数据、选定的特征和网络结构（例如层数）编程的。特别地，一个 DNN 由多个相互连接的神经元组成，这些神经元按层组织：输入层、输出层和一层或多层隐藏层。每个神经元都是一个计算单元，它通过对其输入应用激活函数来计算其输出。在经典的 DNN 中，每个神经元与下一层的所有神经元完全连接，每条边都有一个权重，表示神经元之间连接的强度。总的来说，DNN 可以被视为一个将给定输入转换为输出的函数，这个函数由其计算单元（即神经元）的聚合效应决定，每个神经元都对整个计算过程做出贡献。图 1(a)显示了一个三层 DNN 的示例。"}]},{"ID":"20250513175829-w5bm7u2","Type":"NodeParagraph","Properties":{"id":"20250513175829-w5bm7u2","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20250513175829-af4vhb1.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20250513175829-piws9an","Type":"NodeParagraph","Properties":{"id":"20250513175829-piws9an","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"为了完成一项任务（例如，通过监控图像对自动驾驶汽车的转向角度进行预测），通过大量标记的训练数据对深度神经网络（DNNs）进行训练和编程。然而，与传统软件类似，DNNs 也可能由于训练数据不正确、不完整，甚至运行时编程（即训练）程序错误而包含缺陷（例如，给出错误的转向角度）。例如，人类分析师在收集训练数据时可能包含错误和噪声数据。在这种情况下，给定的输入数据可能会被错误处理（例如，分类、预测），如果存在缺陷的 DNNs 被部署到安全关键系统（例如，最近的特斯拉自动驾驶事故 2），可能会导致损失甚至严重悲剧。对于复杂和高维的现实世界输入，人类几乎不可能确保包括所有可能的，甚至是边缘情况的数据。为了系统地测试和揭示 DNNs 的隐藏缺陷，定义一套合适的覆盖率标准来评估测试充分性以及衡量 DNNs 的内部覆盖状态，以对 DNNs 的测试结果有信心至关重要。"}]},{"ID":"20250513175829-qyvwc7b","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20250513175829-qyvwc7b","updated":"20250513175915"},"Children":[{"Type":"NodeText","Data":"COVERAGE CRITERIA FOR TESTING DL SYSTEMS"}]},{"ID":"20250513175829-l4qnrei","Type":"NodeParagraph","Properties":{"id":"20250513175829-l4qnrei","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"测试覆盖率标准被提出来打破和近似软件内部状态。它对 input 空间进行分区，并建立 input 子空间和近似软件内部状态的关系。这样，与来自单个输入子空间的测试数据相比，来自不同输入子空间的相同数量的测试数据将有更高的机会覆盖更多样化的软件状态，从而更有可能检测到更多样化的软件缺陷。在过去的几十年里，一套设计良好的覆盖率标准 [2]（例如，语句覆盖率、分支覆盖率）已经证明了其实用价值，并在软件行业中被广泛采用，以系统地指导测试过程，以揭示不同级别的软件缺陷，例如，（1） 单元级别：测试小片段的函数。（2） 集成层面：测试多个子模块或功能，检查它们的交互。（3） 系统级：将软件系统作为一个整体进行测试。"}]},{"ID":"20250513175829-hf2n76m","Type":"NodeParagraph","Properties":{"id":"20250513175829-hf2n76m","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"然而，当前实践中的DNN测试仍处于早期阶段，主要依赖于预测精度（类似于仅观察输入及其相应输出的黑盒系统级测试），缺乏用于缺陷检测的系统测试覆盖率标准。此外，传统软件和 DNN 存在明显差异，因此传统软件的现有覆盖标准无法直接应用于 DNN。"}]},{"ID":"20250513175829-2ui1c4i","Type":"NodeParagraph","Properties":{"id":"20250513175829-2ui1c4i","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"在本节中，我们从多个层面设计了一套 DNN 测试覆盖率标准，旨在衡量 DNN 的测试充分性，并促进从多重描述中检测出那些错误行为。为了对工业级应用有用，我们认为测试标准应该简单、可扩展，并且足够通用，可以应用于大量 DNN，而不局限于特定的 DNN 结构或激活函数。从概念上讲，与传统软件类似，DNN 的行为可以分为两类，即主要功能行为和极端情况行为，这两类都可能包含错误的行为（参见图 1（b） 和我们在第 4 节中的评估结果）。我们在设计覆盖率标准时考虑了这些因素。"}]},{"ID":"20250513175829-w28qnuj","Type":"NodeList","ListData":{},"Properties":{"id":"20250513175829-w28qnuj","updated":"20250513175915"},"Children":[{"ID":"20250513175829-pshxhjv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250513175829-pshxhjv","updated":"20250513175915"},"Children":[{"ID":"20250513175829-7gtci67","Type":"NodeParagraph","Properties":{"id":"20250513175829-7gtci67","updated":"20250513175915"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"神经元水平的覆盖标准"}]}]}]},{"ID":"20250513175829-acsd57k","Type":"NodeParagraph","Properties":{"id":"20250513175829-acsd57k","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"在神经元级别，我们使用从训练中确定的神经元 n 的输出值来描述其行为。由于 DNN 的内部逻辑主要由训练数据编程，因此直观地说，DNN 的每个神经元的功能（即神经元输出）应该遵循一些主要由训练数据决定的统计分布。从训练数据分析中获得的神经元的输出分布将允许大致描述其输出值通常由输入数据触发的主要功能区域，其统计分布与训练数据相似，以及输出值很少出现的极端情况。但是，对于实际大小的 DNN，获得每个神经元的准确输出分布将是计算密集型的。本着类似的精神，同时具有可扩展性，我们利用从训练数据中获得的神经元输出值边界来近似主要函数区域和角情况区域。特别地，对于一个神经元 n，设 highn 和 lown 分别是其激活函数取值范围内的上限和下限输出值，其中 highn 和 lown 来自训练数据集分析。我们将 [lown， highn] 称为神经元 n 的主要功能区域。"}]},{"ID":"20250513175829-onf1nt9","Type":"NodeParagraph","Properties":{"id":"20250513175829-onf1nt9","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"定义 3.1.对于测试输入 x ∈T ，给定 x iff ∀n ∈N ： φ（x， n） ∈ [lown ， highn ]，则假设 DNN 位于其主要函数区域中。"}]},{"ID":"20250513175829-x1mbtrz","Type":"NodeParagraph","Properties":{"id":"20250513175829-x1mbtrz","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"为了详尽地覆盖主要功能区域，我们将 [lown ， highn ] 划分为 k 个部分，并要求每个部分都被测试输入覆盖。我们将这种覆盖率命名为 k-multisection neuron coverage。"}]},{"ID":"20250513175829-eyy33nc","Type":"NodeParagraph","Properties":{"id":"20250513175829-eyy33nc","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"（i） k 多截面神经元覆盖率。给定一个神经元 n，kmultisection 神经元覆盖率衡量给定的测试输入 T 集覆盖范围 [lown， highn] 的彻底程度。为了量化这一点，我们将范围 [lown， highn] 划分为 k 个相等的部分（即 k 个多截面），其中 k "},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"\u003e"}]},{"Type":"NodeText","Data":" 0。我们写 Sn i 来表示第 i 节中 1 ≤ i ≤ k 的值集。"}]},{"ID":"20250513175829-8mu50jb","Type":"NodeParagraph","Properties":{"id":"20250513175829-8mu50jb","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"如果 φ（x， n） ∈ Sn i ，则表示第 i 部分被测试输入 x 覆盖。因此，对于一组给定的测试输入 T 和神经元 n，其 k 多截面神经元覆盖率定义为 T 覆盖的截面数与截面总数的比率，即我们定义的 k。我们将神经元 n 的 k 截面覆盖率定义为："}]},{"ID":"20250513175829-kbjpss7","Type":"NodeParagraph","Properties":{"id":"20250513175829-kbjpss7","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20250513175829-c8vh3fe.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20250513175829-wdwkuab","Type":"NodeParagraph","Properties":{"id":"20250513175829-wdwkuab","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"进一步将 DNN 的 k 多节神经元覆盖定义为："}]},{"ID":"20250513175829-jtendc7","Type":"NodeParagraph","Properties":{"id":"20250513175829-jtendc7","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20250513175829-ut3v1a5.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20250513175829-djgepf1","Type":"NodeParagraph","Properties":{"id":"20250513175829-djgepf1","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"然而，对于神经元 n，也存在 φ(x, n) 可能位于 [lown , highn ] 之外的情况，即 φ(x, n) ∈(−∞, lown ) 或 φ(x, n) ε (highn, +∞)。我们将 (−∞, lown ) ∪(highn, +∞) 称为神经元 n 的角点区域。"}]},{"ID":"20250513175829-huz402s","Type":"NodeParagraph","Properties":{"id":"20250513175829-huz402s","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"定义 3.2 对于测试输入 x ∈ T ，我们说 DNN 位于其角例区域，给定 x iff ∃n ∈ N : φ(x, n) ε (−∞, lown ) ∪ (highn, +∞)。"}]},{"ID":"20250513175829-r0plmhh","Type":"NodeParagraph","Properties":{"id":"20250513175829-r0plmhh","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"请注意，从训练数据获得的神经元的概要输出不会位于角例区域。换句话说，如果测试输入遵循与训练数据类似的统计分布，则神经元输出很少位于角例区域。然而，这并不意味着测试神经元的极端情况不重要，因为 DNN 的缺陷也可能位于极端情况区域（参见第 4.3 节）。为了覆盖 DNN 的这些极端情况区域，我们定义了两个覆盖标准，即神经元边界覆盖和强神经元激活覆盖。给定一个测试输入 x，如果 φ(x, n) 属于 (−∞, lown ) 或 (highn, +∞)，我们说对应的角点情况区域被覆盖。为了量化这一点，我们首先定义覆盖的极端情况区域的数量，如下所示："}]},{"ID":"20250513175829-v36k5ux","Type":"NodeParagraph","Properties":{"id":"20250513175829-v36k5ux","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20250513175829-rp68j69.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20250513175829-37qholt","Type":"NodeParagraph","Properties":{"id":"20250513175829-37qholt","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"(ii) 神经元边界覆盖。神经元边界覆盖测量给定的测试输入集 T 覆盖了多少个极端情况区域（相对于上边界值和下边界值）。它被定义为被覆盖的角点情况数量与角点情况总数的比率（2 × |N |）："}]},{"ID":"20250513175829-o05oa0d","Type":"NodeParagraph","Properties":{"id":"20250513175829-o05oa0d","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20250513175829-vxlwkhx.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20250513175829-29n498b","Type":"NodeParagraph","Properties":{"id":"20250513175829-29n498b","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"最近一些关于 DNN 可解释性的研究凭经验表明，过度活跃的神经元可能会在 DNN 中提供有用的学习模式[30, 61]。基于这种直觉，本节其余部分提出的覆盖标准更多地关注过度活跃的神经元情况（例如，下一小节中的 top-k 神经元覆盖）。与神经元边界覆盖类似，我们进一步定义强神经元激活覆盖来测量上角情况的覆盖状态。"}]},{"ID":"20250513175829-57kbfgy","Type":"NodeParagraph","Properties":{"id":"20250513175829-57kbfgy","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"(iii) 强大的神经元激活覆盖范围。强神经元激活覆盖率测量给定的测试输入 T 覆盖了多少个极端情况（相对于上边界值 highn ）。它被定义为被覆盖的上角情况的数量与角情况总数的比率（|N |）："}]},{"ID":"20250513175829-is6ixjx","Type":"NodeParagraph","Properties":{"id":"20250513175829-is6ixjx","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20250513175829-hmxsqes.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20250513175829-dht3rl0","Type":"NodeList","ListData":{},"Properties":{"id":"20250513175829-dht3rl0","updated":"20250513175829"},"Children":[{"ID":"20250513175829-c92y74s","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250513175829-c92y74s","updated":"20250513175829"},"Children":[{"ID":"20250513175829-ea9iq08","Type":"NodeParagraph","Properties":{"id":"20250513175829-ea9iq08","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"层覆盖标准"}]}]}]},{"ID":"20250513175829-blgcuav","Type":"NodeParagraph","Properties":{"id":"20250513175829-blgcuav","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"在层级别，我们使用最活跃的神经元及其组合（或序列）来表征 DNN 的行为。"}]},{"ID":"20250513175829-tefcxyu","Type":"NodeParagraph","Properties":{"id":"20250513175829-tefcxyu","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"对于给定的测试输入 x 和同一层上的神经元 n1 和 n2，如果 φ(x, n1) "},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"\u003e"}]},{"Type":"NodeText","Data":" φ(x, n2)，我们说 n1 比给定 x 的 n2 更活跃。对于第 i 层，我们使用 topk (x, i) 来表示给定 x 的该层上具有最大 k 个输出的神经元。例如，在图 1(a) 中，假设 φ(x, n1) 和 φ(x, n3) 大于 φ(x, n2)，第 1 层的 top-2 神经元是 n1 和 n3（以绿色表示） ）。"}]},{"ID":"20250513175829-dwf343y","Type":"NodeParagraph","Properties":{"id":"20250513175829-dwf343y","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"(i) Top-k 神经元覆盖。 top-k 神经元覆盖率衡量每层上有多少个神经元曾经是最活跃的 k 个神经元。它被定义为每层top-k神经元总数与DNN中神经元总数的比率："}]},{"ID":"20250513175829-107pt46","Type":"NodeParagraph","Properties":{"id":"20250513175829-107pt46","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20250513175829-6h54fym.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20250513175829-mwm9e9b","Type":"NodeParagraph","Properties":{"id":"20250513175829-mwm9e9b","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"来自 DNN 同一层的神经元通常起着类似的作用，来自不同层的顶部活跃神经元是表征 DNN 主要功能的重要指标。直观地说，为了更彻底地测试 DNN，测试数据集应该能发现更多顶级活跃神经元。"}]},{"ID":"20250513175829-xtkq56x","Type":"NodeParagraph","Properties":{"id":"20250513175829-xtkq56x","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"(ii)Top-k 神经元模式。给定一个测试输入 x，每层上前 k 个神经元的序列也形成一个模式。在图 1（a） 中，假设绿色的神经元是每层的前 2 个神经元，则模式可以表示为 （{n1， n3}， {n5， n6}， {n8， n9}）。更正式地说，模式是 2L1 × 2L2 × · · ·× 2Ll，其中 2Li 是第 i 层上神经元的子集集，对于 1 ≤ i ≤ l。给定测试输入集 T ，T 的前 k 个神经元模式的数量定义为："}]},{"ID":"20250513175829-8j388hy","Type":"NodeParagraph","Properties":{"id":"20250513175829-8j388hy","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20250513175829-6925q29.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20250513175829-5lfp34v","Type":"NodeParagraph","Properties":{"id":"20250513175829-5lfp34v","updated":"20250513175829"},"Children":[{"Type":"NodeText","Data":"直观地说，top-k 神经元模式表示与每层的顶部过度活跃神经元不同种类的激活场景。"}]}]}